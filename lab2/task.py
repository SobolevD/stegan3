from lab2.utils.consts import BETA, ALPHA, M, SIGMA, KEY
from lab2.utils.embedding import additional_embedding
from lab2.utils.fourier import get_fft_image, get_abs_matrix, get_phase_matrix, get_complex_matrix, \
    get_inverse_fft_image
from lab2.utils.snipping import get_H_zone, merge_pictures_H_zone
from lab2.utils.watermark import generate_watermark, builtin_watermark, get_rho


def do_embedding(container):

    # 1. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¶–í–ó ùõ∫ –∫–∞–∫ –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã –∏–∑ —á–∏—Å–µ–ª,
    # —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –ø–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –∑–∞–∫–æ–Ω—É
    H_zone_length = int(container.shape[0] * 0.5) * int(container.shape[1] * 0.5)
    watermark, _ = generate_watermark(H_zone_length, M, SIGMA, KEY)

    # 2. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    fft_container = get_fft_image(container)
    abs_fft_container = get_abs_matrix(fft_container)
    phase_fft_container = get_phase_matrix(fft_container)

    # 3. –û—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–¥–¥–∏—Ç–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è.
    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.
    H_zone = get_H_zone(abs_fft_container)
    watermark = watermark.reshape(H_zone.shape)
    H_zone_watermark = additional_embedding(H_zone, BETA, watermark, ALPHA)

    # 4. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–æ—Å–∏—Ç–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    # –æ—Ç –º–∞—Ç—Ä–∏—Ü—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∫ —Ü–∏—Ñ—Ä–æ–≤–æ–º—É —Å–∏–≥–Ω–∞–ª—É.  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –Ω–∞ –¥–∏—Å–∫.
    merged_abs_picture = merge_pictures_H_zone(abs_fft_container, H_zone_watermark)
    complex_matrix = get_complex_matrix(merged_abs_picture, phase_fft_container)
    processed_image = get_inverse_fft_image(complex_matrix)
    return H_zone, watermark, processed_image


def get_rho_for_image(H_zone, watermark, processed_image):
    fft_p_image = get_fft_image(processed_image)
    abs_fft_p_image = get_abs_matrix(fft_p_image)
    H_zone_p = get_H_zone(abs_fft_p_image)
    changed_watermark = builtin_watermark(H_zone_p, H_zone, ALPHA)
    rho = get_rho(watermark, changed_watermark)
    return rho
